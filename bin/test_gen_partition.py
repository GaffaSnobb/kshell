import gen_partition

def test_gen_partition_usda_ne20():
    """
    Generate the partition for 20Ne with the USDA interaction with
    `gen_partition.ModelSpace` and compare with known good values.
    """
    ms = gen_partition.ModelSpace(
        valence_p_n = (2, 2),
        norb = [0, 0, 1, 0, 0, 1],
        lorb = [2, 2, 0, 2, 2, 0],
        jorb = [3, 5, 1, 3, 5, 1],
        itorb = [-1, -1, -1, 1, 1, 1],
    )
    ms.gen_ptn_pn()
    expected_ptn_pn = [
        [(0, 0, 2), (0, 1, 1), (0, 2, 0), (1, 0, 1), (1, 1, 0), (2, 0, 0)],
        [(0, 0, 2), (0, 1, 1), (0, 2, 0), (1, 0, 1), (1, 1, 0), (2, 0, 0)]
    ]
    expected_hworb_pn = [[0, 0, 0], [0, 0, 0]]
    expected_jorb_pn = [[3, 5, 1], [3, 5, 1]]
    expected_ptn_pn_parity = [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]
    ms.ptn_combined(parity=+1)

    for expected, calculated, nucleon in zip(expected_ptn_pn, ms.ptn_pn, ["proton", "neutron"]):
        n_expected = len(expected)
        n_calculated = len(calculated)
        len_msg = (
            f"The number of expected {nucleon} confgurations do not match the number of"
            f" calculated configurations. {n_expected = }, {n_calculated = }"
        )
        assert n_expected == n_calculated, len_msg
        
        for i in range(n_expected):
            ptn_msg = (
                f"{nucleon} configuration number {i} has a mismatch between"
                f" expected and calculated. {expected[i] = }, {calculated[i] = }"
            )
            assert expected[i] == calculated[i], ptn_msg

    for expected, calculated, nucleon in zip(expected_hworb_pn, ms.hworb_pn, ["proton", "neutron"]):
        n_expected = len(expected)
        n_calculated = len(calculated)
        len_msg = (
            f"The number of expected {nucleon} major shell indices do not match the number of"
            f" calculated major shell indices. {n_expected = }, {n_calculated = }"
        )
        assert n_expected == n_calculated, len_msg
        
        hworb_msg = (
            f"The {nucleon} major shell indices do not match the expectations."
            f" {expected = }, {calculated = }"
        )
        assert expected == calculated, hworb_msg

    for expected, calculated, nucleon in zip(expected_jorb_pn, ms.jorb_pn, ["proton", "neutron"]):
        n_expected = len(expected)
        n_calculated = len(calculated)
        len_msg = (
            f"The expected number of total angular momentum entries for {nucleon}"
            f" do not match the number of calculated entries. {n_expected = }, {n_calculated = }"
        )
        assert n_expected == n_calculated, len_msg
        
        hworb_msg = (
            f"The {nucleon} total angular momenta do not match the expectations."
            f" {expected = }, {calculated = }"
        )
        assert expected == calculated, hworb_msg

    parity_msg = (
        "The calculated parity of the orbitals do not match the expected values!"
        f"{ms.ptn_pn_parity = }, {expected_ptn_pn_parity = }"
    )
    assert ms.ptn_pn_parity == expected_ptn_pn_parity, parity_msg

def test_gen_partition_sdpfmu_sc44():
    """
    Generate the partition for 44Sc with the sdpf-mu interaction with
    a 2hw truncation with `gen_partition.ModelSpace` and compare with
    known good values.
    """
    ms = gen_partition.ModelSpace(
        valence_p_n = (13, 15),
        norb = [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1],
        lorb = [2, 2, 0, 3, 3, 1, 1, 2, 2, 0, 3, 3, 1, 1],
        jorb = [5, 3, 1, 7, 5, 3, 1, 5, 3, 1, 7, 5, 3, 1],
        itorb = [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1],
    )
    ms.set_hw_truncation(hw_truncation=[0, 2], is_hw_exct=True)
    ms.gen_ptn_pn()
    expected_ptn_pn = [
        [(4, 4, 2, 0, 0, 1, 2), (4, 4, 2, 0, 0, 2, 1), (4, 4, 2, 0, 0, 3, 0), (4, 4, 2, 0, 1, 0, 2), (4, 4, 2, 0, 1, 1, 1), (4, 4, 2, 0, 1, 2, 0), (4, 4, 2, 0, 2, 0, 1), (4, 4, 2, 0, 2, 1, 0), (4, 4, 2, 0, 3, 0, 0), (4, 4, 2, 1, 0, 0, 2), (4, 4, 2, 1, 0, 1, 1), (4, 4, 2, 1, 0, 2, 0), (4, 4, 2, 1, 1, 0, 1), (4, 4, 2, 1, 1, 1, 0), (4, 4, 2, 1, 2, 0, 0), (4, 4, 2, 2, 0, 0, 1), (4, 4, 2, 2, 0, 1, 0), (4, 4, 2, 2, 1, 0, 0), (4, 4, 2, 3, 0, 0, 0), (5, 3, 2, 0, 0, 1, 2), (5, 3, 2, 0, 0, 2, 1), (5, 3, 2, 0, 0, 3, 0), (5, 3, 2, 0, 1, 0, 2), (5, 3, 2, 0, 1, 1, 1), (5, 3, 2, 0, 1, 2, 0), (5, 3, 2, 0, 2, 0, 1), (5, 3, 2, 0, 2, 1, 0), (5, 3, 2, 0, 3, 0, 0), (5, 3, 2, 1, 0, 0, 2), (5, 3, 2, 1, 0, 1, 1), (5, 3, 2, 1, 0, 2, 0), (5, 3, 2, 1, 1, 0, 1), (5, 3, 2, 1, 1, 1, 0), (5, 3, 2, 1, 2, 0, 0), (5, 3, 2, 2, 0, 0, 1), (5, 3, 2, 2, 0, 1, 0), (5, 3, 2, 2, 1, 0, 0), (5, 3, 2, 3, 0, 0, 0), (5, 4, 1, 0, 0, 1, 2), (5, 4, 1, 0, 0, 2, 1), (5, 4, 1, 0, 0, 3, 0), (5, 4, 1, 0, 1, 0, 2), (5, 4, 1, 0, 1, 1, 1), (5, 4, 1, 0, 1, 2, 0), (5, 4, 1, 0, 2, 0, 1), (5, 4, 1, 0, 2, 1, 0), (5, 4, 1, 0, 3, 0, 0), (5, 4, 1, 1, 0, 0, 2), (5, 4, 1, 1, 0, 1, 1), (5, 4, 1, 1, 0, 2, 0), (5, 4, 1, 1, 1, 0, 1), (5, 4, 1, 1, 1, 1, 0), (5, 4, 1, 1, 2, 0, 0), (5, 4, 1, 2, 0, 0, 1), (5, 4, 1, 2, 0, 1, 0), (5, 4, 1, 2, 1, 0, 0), (5, 4, 1, 3, 0, 0, 0), (5, 4, 2, 0, 0, 0, 2), (5, 4, 2, 0, 0, 1, 1), (5, 4, 2, 0, 0, 2, 0), (5, 4, 2, 0, 1, 0, 1), (5, 4, 2, 0, 1, 1, 0), (5, 4, 2, 0, 2, 0, 0), (5, 4, 2, 1, 0, 0, 1), (5, 4, 2, 1, 0, 1, 0), (5, 4, 2, 1, 1, 0, 0), (5, 4, 2, 2, 0, 0, 0), (6, 2, 2, 0, 0, 1, 2), (6, 2, 2, 0, 0, 2, 1), (6, 2, 2, 0, 0, 3, 0), (6, 2, 2, 0, 1, 0, 2), (6, 2, 2, 0, 1, 1, 1), (6, 2, 2, 0, 1, 2, 0), (6, 2, 2, 0, 2, 0, 1), (6, 2, 2, 0, 2, 1, 0), (6, 2, 2, 0, 3, 0, 0), (6, 2, 2, 1, 0, 0, 2), (6, 2, 2, 1, 0, 1, 1), (6, 2, 2, 1, 0, 2, 0), (6, 2, 2, 1, 1, 0, 1), (6, 2, 2, 1, 1, 1, 0), (6, 2, 2, 1, 2, 0, 0), (6, 2, 2, 2, 0, 0, 1), (6, 2, 2, 2, 0, 1, 0), (6, 2, 2, 2, 1, 0, 0), (6, 2, 2, 3, 0, 0, 0), (6, 3, 1, 0, 0, 1, 2), (6, 3, 1, 0, 0, 2, 1), (6, 3, 1, 0, 0, 3, 0), (6, 3, 1, 0, 1, 0, 2), (6, 3, 1, 0, 1, 1, 1), (6, 3, 1, 0, 1, 2, 0), (6, 3, 1, 0, 2, 0, 1), (6, 3, 1, 0, 2, 1, 0), (6, 3, 1, 0, 3, 0, 0), (6, 3, 1, 1, 0, 0, 2), (6, 3, 1, 1, 0, 1, 1), (6, 3, 1, 1, 0, 2, 0), (6, 3, 1, 1, 1, 0, 1), (6, 3, 1, 1, 1, 1, 0), (6, 3, 1, 1, 2, 0, 0), (6, 3, 1, 2, 0, 0, 1), (6, 3, 1, 2, 0, 1, 0), (6, 3, 1, 2, 1, 0, 0), (6, 3, 1, 3, 0, 0, 0), (6, 3, 2, 0, 0, 0, 2), (6, 3, 2, 0, 0, 1, 1), (6, 3, 2, 0, 0, 2, 0), (6, 3, 2, 0, 1, 0, 1), (6, 3, 2, 0, 1, 1, 0), (6, 3, 2, 0, 2, 0, 0), (6, 3, 2, 1, 0, 0, 1), (6, 3, 2, 1, 0, 1, 0), (6, 3, 2, 1, 1, 0, 0), (6, 3, 2, 2, 0, 0, 0), (6, 4, 0, 0, 0, 1, 2), (6, 4, 0, 0, 0, 2, 1), (6, 4, 0, 0, 0, 3, 0), (6, 4, 0, 0, 1, 0, 2), (6, 4, 0, 0, 1, 1, 1), (6, 4, 0, 0, 1, 2, 0), (6, 4, 0, 0, 2, 0, 1), (6, 4, 0, 0, 2, 1, 0), (6, 4, 0, 0, 3, 0, 0), (6, 4, 0, 1, 0, 0, 2), (6, 4, 0, 1, 0, 1, 1), (6, 4, 0, 1, 0, 2, 0), (6, 4, 0, 1, 1, 0, 1), (6, 4, 0, 1, 1, 1, 0), (6, 4, 0, 1, 2, 0, 0), (6, 4, 0, 2, 0, 0, 1), (6, 4, 0, 2, 0, 1, 0), (6, 4, 0, 2, 1, 0, 0), (6, 4, 0, 3, 0, 0, 0), (6, 4, 1, 0, 0, 0, 2), (6, 4, 1, 0, 0, 1, 1), (6, 4, 1, 0, 0, 2, 0), (6, 4, 1, 0, 1, 0, 1), (6, 4, 1, 0, 1, 1, 0), (6, 4, 1, 0, 2, 0, 0), (6, 4, 1, 1, 0, 0, 1), (6, 4, 1, 1, 0, 1, 0), (6, 4, 1, 1, 1, 0, 0), (6, 4, 1, 2, 0, 0, 0), (6, 4, 2, 0, 0, 0, 1), (6, 4, 2, 0, 0, 1, 0), (6, 4, 2, 0, 1, 0, 0), (6, 4, 2, 1, 0, 0, 0)],
        [(4, 4, 2, 0, 0, 3, 2), (4, 4, 2, 0, 0, 4, 1), (4, 4, 2, 0, 1, 2, 2), (4, 4, 2, 0, 1, 3, 1), (4, 4, 2, 0, 1, 4, 0), (4, 4, 2, 0, 2, 1, 2), (4, 4, 2, 0, 2, 2, 1), (4, 4, 2, 0, 2, 3, 0), (4, 4, 2, 0, 3, 0, 2), (4, 4, 2, 0, 3, 1, 1), (4, 4, 2, 0, 3, 2, 0), (4, 4, 2, 0, 4, 0, 1), (4, 4, 2, 0, 4, 1, 0), (4, 4, 2, 0, 5, 0, 0), (4, 4, 2, 1, 0, 2, 2), (4, 4, 2, 1, 0, 3, 1), (4, 4, 2, 1, 0, 4, 0), (4, 4, 2, 1, 1, 1, 2), (4, 4, 2, 1, 1, 2, 1), (4, 4, 2, 1, 1, 3, 0), (4, 4, 2, 1, 2, 0, 2), (4, 4, 2, 1, 2, 1, 1), (4, 4, 2, 1, 2, 2, 0), (4, 4, 2, 1, 3, 0, 1), (4, 4, 2, 1, 3, 1, 0), (4, 4, 2, 1, 4, 0, 0), (4, 4, 2, 2, 0, 1, 2), (4, 4, 2, 2, 0, 2, 1), (4, 4, 2, 2, 0, 3, 0), (4, 4, 2, 2, 1, 0, 2), (4, 4, 2, 2, 1, 1, 1), (4, 4, 2, 2, 1, 2, 0), (4, 4, 2, 2, 2, 0, 1), (4, 4, 2, 2, 2, 1, 0), (4, 4, 2, 2, 3, 0, 0), (4, 4, 2, 3, 0, 0, 2), (4, 4, 2, 3, 0, 1, 1), (4, 4, 2, 3, 0, 2, 0), (4, 4, 2, 3, 1, 0, 1), (4, 4, 2, 3, 1, 1, 0), (4, 4, 2, 3, 2, 0, 0), (4, 4, 2, 4, 0, 0, 1), (4, 4, 2, 4, 0, 1, 0), (4, 4, 2, 4, 1, 0, 0), (4, 4, 2, 5, 0, 0, 0), (5, 3, 2, 0, 0, 3, 2), (5, 3, 2, 0, 0, 4, 1), (5, 3, 2, 0, 1, 2, 2), (5, 3, 2, 0, 1, 3, 1), (5, 3, 2, 0, 1, 4, 0), (5, 3, 2, 0, 2, 1, 2), (5, 3, 2, 0, 2, 2, 1), (5, 3, 2, 0, 2, 3, 0), (5, 3, 2, 0, 3, 0, 2), (5, 3, 2, 0, 3, 1, 1), (5, 3, 2, 0, 3, 2, 0), (5, 3, 2, 0, 4, 0, 1), (5, 3, 2, 0, 4, 1, 0), (5, 3, 2, 0, 5, 0, 0), (5, 3, 2, 1, 0, 2, 2), (5, 3, 2, 1, 0, 3, 1), (5, 3, 2, 1, 0, 4, 0), (5, 3, 2, 1, 1, 1, 2), (5, 3, 2, 1, 1, 2, 1), (5, 3, 2, 1, 1, 3, 0), (5, 3, 2, 1, 2, 0, 2), (5, 3, 2, 1, 2, 1, 1), (5, 3, 2, 1, 2, 2, 0), (5, 3, 2, 1, 3, 0, 1), (5, 3, 2, 1, 3, 1, 0), (5, 3, 2, 1, 4, 0, 0), (5, 3, 2, 2, 0, 1, 2), (5, 3, 2, 2, 0, 2, 1), (5, 3, 2, 2, 0, 3, 0), (5, 3, 2, 2, 1, 0, 2), (5, 3, 2, 2, 1, 1, 1), (5, 3, 2, 2, 1, 2, 0), (5, 3, 2, 2, 2, 0, 1), (5, 3, 2, 2, 2, 1, 0), (5, 3, 2, 2, 3, 0, 0), (5, 3, 2, 3, 0, 0, 2), (5, 3, 2, 3, 0, 1, 1), (5, 3, 2, 3, 0, 2, 0), (5, 3, 2, 3, 1, 0, 1), (5, 3, 2, 3, 1, 1, 0), (5, 3, 2, 3, 2, 0, 0), (5, 3, 2, 4, 0, 0, 1), (5, 3, 2, 4, 0, 1, 0), (5, 3, 2, 4, 1, 0, 0), (5, 3, 2, 5, 0, 0, 0), (5, 4, 1, 0, 0, 3, 2), (5, 4, 1, 0, 0, 4, 1), (5, 4, 1, 0, 1, 2, 2), (5, 4, 1, 0, 1, 3, 1), (5, 4, 1, 0, 1, 4, 0), (5, 4, 1, 0, 2, 1, 2), (5, 4, 1, 0, 2, 2, 1), (5, 4, 1, 0, 2, 3, 0), (5, 4, 1, 0, 3, 0, 2), (5, 4, 1, 0, 3, 1, 1), (5, 4, 1, 0, 3, 2, 0), (5, 4, 1, 0, 4, 0, 1), (5, 4, 1, 0, 4, 1, 0), (5, 4, 1, 0, 5, 0, 0), (5, 4, 1, 1, 0, 2, 2), (5, 4, 1, 1, 0, 3, 1), (5, 4, 1, 1, 0, 4, 0), (5, 4, 1, 1, 1, 1, 2), (5, 4, 1, 1, 1, 2, 1), (5, 4, 1, 1, 1, 3, 0), (5, 4, 1, 1, 2, 0, 2), (5, 4, 1, 1, 2, 1, 1), (5, 4, 1, 1, 2, 2, 0), (5, 4, 1, 1, 3, 0, 1), (5, 4, 1, 1, 3, 1, 0), (5, 4, 1, 1, 4, 0, 0), (5, 4, 1, 2, 0, 1, 2), (5, 4, 1, 2, 0, 2, 1), (5, 4, 1, 2, 0, 3, 0), (5, 4, 1, 2, 1, 0, 2), (5, 4, 1, 2, 1, 1, 1), (5, 4, 1, 2, 1, 2, 0), (5, 4, 1, 2, 2, 0, 1), (5, 4, 1, 2, 2, 1, 0), (5, 4, 1, 2, 3, 0, 0), (5, 4, 1, 3, 0, 0, 2), (5, 4, 1, 3, 0, 1, 1), (5, 4, 1, 3, 0, 2, 0), (5, 4, 1, 3, 1, 0, 1), (5, 4, 1, 3, 1, 1, 0), (5, 4, 1, 3, 2, 0, 0), (5, 4, 1, 4, 0, 0, 1), (5, 4, 1, 4, 0, 1, 0), (5, 4, 1, 4, 1, 0, 0), (5, 4, 1, 5, 0, 0, 0), (5, 4, 2, 0, 0, 2, 2), (5, 4, 2, 0, 0, 3, 1), (5, 4, 2, 0, 0, 4, 0), (5, 4, 2, 0, 1, 1, 2), (5, 4, 2, 0, 1, 2, 1), (5, 4, 2, 0, 1, 3, 0), (5, 4, 2, 0, 2, 0, 2), (5, 4, 2, 0, 2, 1, 1), (5, 4, 2, 0, 2, 2, 0), (5, 4, 2, 0, 3, 0, 1), (5, 4, 2, 0, 3, 1, 0), (5, 4, 2, 0, 4, 0, 0), (5, 4, 2, 1, 0, 1, 2), (5, 4, 2, 1, 0, 2, 1), (5, 4, 2, 1, 0, 3, 0), (5, 4, 2, 1, 1, 0, 2), (5, 4, 2, 1, 1, 1, 1), (5, 4, 2, 1, 1, 2, 0), (5, 4, 2, 1, 2, 0, 1), (5, 4, 2, 1, 2, 1, 0), (5, 4, 2, 1, 3, 0, 0), (5, 4, 2, 2, 0, 0, 2), (5, 4, 2, 2, 0, 1, 1), (5, 4, 2, 2, 0, 2, 0), (5, 4, 2, 2, 1, 0, 1), (5, 4, 2, 2, 1, 1, 0), (5, 4, 2, 2, 2, 0, 0), (5, 4, 2, 3, 0, 0, 1), (5, 4, 2, 3, 0, 1, 0), (5, 4, 2, 3, 1, 0, 0), (5, 4, 2, 4, 0, 0, 0), (6, 2, 2, 0, 0, 3, 2), (6, 2, 2, 0, 0, 4, 1), (6, 2, 2, 0, 1, 2, 2), (6, 2, 2, 0, 1, 3, 1), (6, 2, 2, 0, 1, 4, 0), (6, 2, 2, 0, 2, 1, 2), (6, 2, 2, 0, 2, 2, 1), (6, 2, 2, 0, 2, 3, 0), (6, 2, 2, 0, 3, 0, 2), (6, 2, 2, 0, 3, 1, 1), (6, 2, 2, 0, 3, 2, 0), (6, 2, 2, 0, 4, 0, 1), (6, 2, 2, 0, 4, 1, 0), (6, 2, 2, 0, 5, 0, 0), (6, 2, 2, 1, 0, 2, 2), (6, 2, 2, 1, 0, 3, 1), (6, 2, 2, 1, 0, 4, 0), (6, 2, 2, 1, 1, 1, 2), (6, 2, 2, 1, 1, 2, 1), (6, 2, 2, 1, 1, 3, 0), (6, 2, 2, 1, 2, 0, 2), (6, 2, 2, 1, 2, 1, 1), (6, 2, 2, 1, 2, 2, 0), (6, 2, 2, 1, 3, 0, 1), (6, 2, 2, 1, 3, 1, 0), (6, 2, 2, 1, 4, 0, 0), (6, 2, 2, 2, 0, 1, 2), (6, 2, 2, 2, 0, 2, 1), (6, 2, 2, 2, 0, 3, 0), (6, 2, 2, 2, 1, 0, 2), (6, 2, 2, 2, 1, 1, 1), (6, 2, 2, 2, 1, 2, 0), (6, 2, 2, 2, 2, 0, 1), (6, 2, 2, 2, 2, 1, 0), (6, 2, 2, 2, 3, 0, 0), (6, 2, 2, 3, 0, 0, 2), (6, 2, 2, 3, 0, 1, 1), (6, 2, 2, 3, 0, 2, 0), (6, 2, 2, 3, 1, 0, 1), (6, 2, 2, 3, 1, 1, 0), (6, 2, 2, 3, 2, 0, 0), (6, 2, 2, 4, 0, 0, 1), (6, 2, 2, 4, 0, 1, 0), (6, 2, 2, 4, 1, 0, 0), (6, 2, 2, 5, 0, 0, 0), (6, 3, 1, 0, 0, 3, 2), (6, 3, 1, 0, 0, 4, 1), (6, 3, 1, 0, 1, 2, 2), (6, 3, 1, 0, 1, 3, 1), (6, 3, 1, 0, 1, 4, 0), (6, 3, 1, 0, 2, 1, 2), (6, 3, 1, 0, 2, 2, 1), (6, 3, 1, 0, 2, 3, 0), (6, 3, 1, 0, 3, 0, 2), (6, 3, 1, 0, 3, 1, 1), (6, 3, 1, 0, 3, 2, 0), (6, 3, 1, 0, 4, 0, 1), (6, 3, 1, 0, 4, 1, 0), (6, 3, 1, 0, 5, 0, 0), (6, 3, 1, 1, 0, 2, 2), (6, 3, 1, 1, 0, 3, 1), (6, 3, 1, 1, 0, 4, 0), (6, 3, 1, 1, 1, 1, 2), (6, 3, 1, 1, 1, 2, 1), (6, 3, 1, 1, 1, 3, 0), (6, 3, 1, 1, 2, 0, 2), (6, 3, 1, 1, 2, 1, 1), (6, 3, 1, 1, 2, 2, 0), (6, 3, 1, 1, 3, 0, 1), (6, 3, 1, 1, 3, 1, 0), (6, 3, 1, 1, 4, 0, 0), (6, 3, 1, 2, 0, 1, 2), (6, 3, 1, 2, 0, 2, 1), (6, 3, 1, 2, 0, 3, 0), (6, 3, 1, 2, 1, 0, 2), (6, 3, 1, 2, 1, 1, 1), (6, 3, 1, 2, 1, 2, 0), (6, 3, 1, 2, 2, 0, 1), (6, 3, 1, 2, 2, 1, 0), (6, 3, 1, 2, 3, 0, 0), (6, 3, 1, 3, 0, 0, 2), (6, 3, 1, 3, 0, 1, 1), (6, 3, 1, 3, 0, 2, 0), (6, 3, 1, 3, 1, 0, 1), (6, 3, 1, 3, 1, 1, 0), (6, 3, 1, 3, 2, 0, 0), (6, 3, 1, 4, 0, 0, 1), (6, 3, 1, 4, 0, 1, 0), (6, 3, 1, 4, 1, 0, 0), (6, 3, 1, 5, 0, 0, 0), (6, 3, 2, 0, 0, 2, 2), (6, 3, 2, 0, 0, 3, 1), (6, 3, 2, 0, 0, 4, 0), (6, 3, 2, 0, 1, 1, 2), (6, 3, 2, 0, 1, 2, 1), (6, 3, 2, 0, 1, 3, 0), (6, 3, 2, 0, 2, 0, 2), (6, 3, 2, 0, 2, 1, 1), (6, 3, 2, 0, 2, 2, 0), (6, 3, 2, 0, 3, 0, 1), (6, 3, 2, 0, 3, 1, 0), (6, 3, 2, 0, 4, 0, 0), (6, 3, 2, 1, 0, 1, 2), (6, 3, 2, 1, 0, 2, 1), (6, 3, 2, 1, 0, 3, 0), (6, 3, 2, 1, 1, 0, 2), (6, 3, 2, 1, 1, 1, 1), (6, 3, 2, 1, 1, 2, 0), (6, 3, 2, 1, 2, 0, 1), (6, 3, 2, 1, 2, 1, 0), (6, 3, 2, 1, 3, 0, 0), (6, 3, 2, 2, 0, 0, 2), (6, 3, 2, 2, 0, 1, 1), (6, 3, 2, 2, 0, 2, 0), (6, 3, 2, 2, 1, 0, 1), (6, 3, 2, 2, 1, 1, 0), (6, 3, 2, 2, 2, 0, 0), (6, 3, 2, 3, 0, 0, 1), (6, 3, 2, 3, 0, 1, 0), (6, 3, 2, 3, 1, 0, 0), (6, 3, 2, 4, 0, 0, 0), (6, 4, 0, 0, 0, 3, 2), (6, 4, 0, 0, 0, 4, 1), (6, 4, 0, 0, 1, 2, 2), (6, 4, 0, 0, 1, 3, 1), (6, 4, 0, 0, 1, 4, 0), (6, 4, 0, 0, 2, 1, 2), (6, 4, 0, 0, 2, 2, 1), (6, 4, 0, 0, 2, 3, 0), (6, 4, 0, 0, 3, 0, 2), (6, 4, 0, 0, 3, 1, 1), (6, 4, 0, 0, 3, 2, 0), (6, 4, 0, 0, 4, 0, 1), (6, 4, 0, 0, 4, 1, 0), (6, 4, 0, 0, 5, 0, 0), (6, 4, 0, 1, 0, 2, 2), (6, 4, 0, 1, 0, 3, 1), (6, 4, 0, 1, 0, 4, 0), (6, 4, 0, 1, 1, 1, 2), (6, 4, 0, 1, 1, 2, 1), (6, 4, 0, 1, 1, 3, 0), (6, 4, 0, 1, 2, 0, 2), (6, 4, 0, 1, 2, 1, 1), (6, 4, 0, 1, 2, 2, 0), (6, 4, 0, 1, 3, 0, 1), (6, 4, 0, 1, 3, 1, 0), (6, 4, 0, 1, 4, 0, 0), (6, 4, 0, 2, 0, 1, 2), (6, 4, 0, 2, 0, 2, 1), (6, 4, 0, 2, 0, 3, 0), (6, 4, 0, 2, 1, 0, 2), (6, 4, 0, 2, 1, 1, 1), (6, 4, 0, 2, 1, 2, 0), (6, 4, 0, 2, 2, 0, 1), (6, 4, 0, 2, 2, 1, 0), (6, 4, 0, 2, 3, 0, 0), (6, 4, 0, 3, 0, 0, 2), (6, 4, 0, 3, 0, 1, 1), (6, 4, 0, 3, 0, 2, 0), (6, 4, 0, 3, 1, 0, 1), (6, 4, 0, 3, 1, 1, 0), (6, 4, 0, 3, 2, 0, 0), (6, 4, 0, 4, 0, 0, 1), (6, 4, 0, 4, 0, 1, 0), (6, 4, 0, 4, 1, 0, 0), (6, 4, 0, 5, 0, 0, 0), (6, 4, 1, 0, 0, 2, 2), (6, 4, 1, 0, 0, 3, 1), (6, 4, 1, 0, 0, 4, 0), (6, 4, 1, 0, 1, 1, 2), (6, 4, 1, 0, 1, 2, 1), (6, 4, 1, 0, 1, 3, 0), (6, 4, 1, 0, 2, 0, 2), (6, 4, 1, 0, 2, 1, 1), (6, 4, 1, 0, 2, 2, 0), (6, 4, 1, 0, 3, 0, 1), (6, 4, 1, 0, 3, 1, 0), (6, 4, 1, 0, 4, 0, 0), (6, 4, 1, 1, 0, 1, 2), (6, 4, 1, 1, 0, 2, 1), (6, 4, 1, 1, 0, 3, 0), (6, 4, 1, 1, 1, 0, 2), (6, 4, 1, 1, 1, 1, 1), (6, 4, 1, 1, 1, 2, 0), (6, 4, 1, 1, 2, 0, 1), (6, 4, 1, 1, 2, 1, 0), (6, 4, 1, 1, 3, 0, 0), (6, 4, 1, 2, 0, 0, 2), (6, 4, 1, 2, 0, 1, 1), (6, 4, 1, 2, 0, 2, 0), (6, 4, 1, 2, 1, 0, 1), (6, 4, 1, 2, 1, 1, 0), (6, 4, 1, 2, 2, 0, 0), (6, 4, 1, 3, 0, 0, 1), (6, 4, 1, 3, 0, 1, 0), (6, 4, 1, 3, 1, 0, 0), (6, 4, 1, 4, 0, 0, 0), (6, 4, 2, 0, 0, 1, 2), (6, 4, 2, 0, 0, 2, 1), (6, 4, 2, 0, 0, 3, 0), (6, 4, 2, 0, 1, 0, 2), (6, 4, 2, 0, 1, 1, 1), (6, 4, 2, 0, 1, 2, 0), (6, 4, 2, 0, 2, 0, 1), (6, 4, 2, 0, 2, 1, 0), (6, 4, 2, 0, 3, 0, 0), (6, 4, 2, 1, 0, 0, 2), (6, 4, 2, 1, 0, 1, 1), (6, 4, 2, 1, 0, 2, 0), (6, 4, 2, 1, 1, 0, 1), (6, 4, 2, 1, 1, 1, 0), (6, 4, 2, 1, 2, 0, 0), (6, 4, 2, 2, 0, 0, 1), (6, 4, 2, 2, 0, 1, 0), (6, 4, 2, 2, 1, 0, 0), (6, 4, 2, 3, 0, 0, 0)]
    ]
    expected_hworb_pn = [[2, 2, 2, 3, 3, 3, 3], [2, 2, 2, 3, 3, 3, 3]]
    expected_jorb_pn = [[5, 3, 1, 7, 5, 3, 1], [5, 3, 1, 7, 5, 3, 1]]
    expected_ptn_pn_parity = [
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    ]
    ms.ptn_combined(parity=+1)

    for expected, calculated, nucleon in zip(expected_ptn_pn, ms.ptn_pn, ["proton", "neutron"]):
        n_expected = len(expected)
        n_calculated = len(calculated)
        len_msg = (
            f"The number of expected {nucleon} confgurations do not match the number of"
            f" calculated configurations. {n_expected = }, {n_calculated = }"
        )
        assert n_expected == n_calculated, len_msg
        
        for i in range(n_expected):
            ptn_msg = (
                f"{nucleon} configuration number {i} has a mismatch between"
                f" expected and calculated. {expected[i] = }, {calculated[i] = }"
            )
            assert expected[i] == calculated[i], ptn_msg

    for expected, calculated, nucleon in zip(expected_hworb_pn, ms.hworb_pn, ["proton", "neutron"]):
        n_expected = len(expected)
        n_calculated = len(calculated)
        len_msg = (
            f"The number of expected {nucleon} major shell indices do not match the number of"
            f" calculated major shell indices. {n_expected = }, {n_calculated = }"
        )
        assert n_expected == n_calculated, len_msg
        
        hworb_msg = (
            f"The {nucleon} major shell indices do not match the expectations."
            f" {expected = }, {calculated = }"
        )
        assert expected == calculated, hworb_msg

    for expected, calculated, nucleon in zip(expected_jorb_pn, ms.jorb_pn, ["proton", "neutron"]):
        n_expected = len(expected)
        n_calculated = len(calculated)
        len_msg = (
            f"The expected number of total angular momentum entries for {nucleon}"
            f" do not match the number of calculated entries. {n_expected = }, {n_calculated = }"
        )
        assert n_expected == n_calculated, len_msg
        
        hworb_msg = (
            f"The {nucleon} total angular momenta do not match the expectations."
            f" {expected = }, {calculated = }"
        )
        assert expected == calculated, hworb_msg

    parity_msg = (
        "The calculated parity of the orbitals do not match the expected values!"
        f"{ms.ptn_pn_parity = }, {expected_ptn_pn_parity = }"
    )
    assert ms.ptn_pn_parity == expected_ptn_pn_parity, parity_msg

def test_gen_partition_snbg1_sn120():
    """
    Generate the partition for 120Sn with the snbg1 interaction with
    `gen_partition.ModelSpace` and compare with known good values.
    """
    ms = gen_partition.ModelSpace(
        valence_p_n = (0, 20),
        norb = [1, 0, 0, 2, 1],
        lorb = [2, 4, 5, 0, 2],
        jorb = [5, 7, 11, 1, 3],
        itorb = [1, 1, 1, 1, 1],
    )
    ms.gen_ptn_pn()
    ms.ptn_combined(parity=+1)
    expected_ptn_pn = [
        [(0, 0, 2), (0, 1, 1), (0, 2, 0), (1, 0, 1), (1, 1, 0), (2, 0, 0)],
        [(0, 0, 2), (0, 1, 1), (0, 2, 0), (1, 0, 1), (1, 1, 0), (2, 0, 0)]
    ]
    expected_hworb_pn = [[0, 0, 0], [0, 0, 0]]
    expected_jorb_pn = [[3, 5, 1], [3, 5, 1]]
    return

    for expected, calculated, nucleon in zip(expected_ptn_pn, ms.ptn_pn, ["proton", "neutron"]):
        n_expected = len(expected)
        n_calculated = len(calculated)
        len_msg = (
            f"The number of expected {nucleon} confgurations do not match the number of"
            f" calculated configurations. {n_expected = }, {n_calculated = }"
        )
        assert n_expected == n_calculated, len_msg
        
        for i in range(n_expected):
            ptn_msg = (
                f"{nucleon} configuration number {i} has a mismatch between"
                f" expected and calculated. {expected[i] = }, {calculated[i] = }"
            )
            assert expected[i] == calculated[i], ptn_msg

    for expected, calculated, nucleon in zip(expected_hworb_pn, ms.hworb_pn, ["proton", "neutron"]):
        n_expected = len(expected)
        n_calculated = len(calculated)
        len_msg = (
            f"The number of expected {nucleon} major shell indices do not match the number of"
            f" calculated major shell indices. {n_expected = }, {n_calculated = }"
        )
        assert n_expected == n_calculated, len_msg
        
        hworb_msg = (
            f"The {nucleon} major shell indices do not match the expectations."
            f" {expected = }, {calculated = }"
        )
        assert expected == calculated, hworb_msg

    for expected, calculated, nucleon in zip(expected_jorb_pn, ms.jorb_pn, ["proton", "neutron"]):
        n_expected = len(expected)
        n_calculated = len(calculated)
        len_msg = (
            f"The expected number of total angular momentum entries for {nucleon}"
            f" do not match the number of calculated entries. {n_expected = }, {n_calculated = }"
        )
        assert n_expected == n_calculated, len_msg
        
        hworb_msg = (
            f"The {nucleon} total angular momenta do not match the expectations."
            f" {expected = }, {calculated = }"
        )
        assert expected == calculated, hworb_msg

if __name__ == "__main__":
    test_gen_partition_usda_ne20()
    test_gen_partition_sdpfmu_sc44()
    # test_gen_partition_snbg1_sn120()